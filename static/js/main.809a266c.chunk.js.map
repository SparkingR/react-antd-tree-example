{"version":3,"sources":["pages/App.module.scss","components/FileTree/FileTree.module.scss","components/Modal/Modal.js","components/FileTree/FileTree.js","api.js","pages/App.js","serviceWorker.js","index.js","config.js"],"names":["module","exports","app","upload-btn","selected-file","submit-file","file-tree","spin","cx","classNames","bind","styles","Modal","handleOk","_this","props","onModalOk","handleCancel","loading","onModalClose","_this$props","this","className","visible","width","title","cancelBtnText","okBtnText","prepareToSubmit","react_default","a","createElement","modal","onOk","onCancel","centered","destroyOnClose","footer","es_button","key","disabled","onClick","type","children","Component","defaultProps","TreeNode","tree","FileTree","state","fileTreeData","componentDidMount","initTreeRoot","then","treeRoot","setTimeout","setState","prevState","onClickNodeChild","treeNode","getNodeChild","isLeaf","path","childNodes","dataRef","Object","toConsumableArray","onSelect","selectedKeys","event","setSelectedFile","isEmpty_default","node","renderTreeNodes","data","fileSelectable","folderSelectable","map","item","name","isFolder","selectable","tip","loadData","nodePath","_ref","_ref$method","method","endpoint","_ref$query","query","_ref$fullUrl","fullUrl","url","host","axios","params","request","res","fileList","file","objectSpread","catch","err","console","error","App","modalVisible","modalLoading","selectedFile","submitFile","showModal","_this$state","components_Modal_Modal","Boolean","length","components_FileTree_FileTree","rootFolder","window","location","hostname","match","ReactDOM","render","pages_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","global","__webpack_require__","d","__webpack_exports__","FAKE_API_ROOT","HOST","concat","protocol","PATH","pathname","PORT","port","API_ROOT"],"mappings":"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","file":"static/js/main.809a266c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1LJeu\",\"upload-btn\":\"App_upload-btn__2zG_I\",\"selected-file\":\"App_selected-file__1SV6C\",\"submit-file\":\"App_submit-file__2qkBd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"file-tree\":\"FileTree_file-tree__3yELz\",\"spin\":\"FileTree_spin__uCCEv\"};","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames/bind'\nimport styles from './Modal.module.scss'\nimport { Modal as AntdModal, Button } from 'antd'\n\nconst cx = classNames.bind(styles)\n\nclass Modal extends Component {\n  static propTypes = {\n    className: PropTypes.string,\n    visible: PropTypes.bool,\n    width: PropTypes.string,\n    title: PropTypes.string,\n    cancelBtnText: PropTypes.string,\n    okBtnText: PropTypes.string,\n    loading: PropTypes.bool,\n    prepareToSubmit: PropTypes.bool,\n    onModalOk: PropTypes.func,\n    onModalClose: PropTypes.func,\n  }\n\n  static defaultProps = {\n    className: '',\n    visible: true,\n    width: '50%',\n    title: '',\n    cancelBtnText: 'Cancel',\n    okBtnText: 'Ok',\n    loading: false,\n    prepareToSubmit: true,\n    onModalOk: () => {},\n    onModalClose: () => {},\n  }\n\n  handleOk = () => {\n    this.props.onModalOk()\n  }\n\n  handleCancel = () => {\n    !this.props.loading && this.props.onModalClose()\n  }\n\n  render() {\n    const {\n      className,\n      visible,\n      width,\n      title,\n      cancelBtnText,\n      okBtnText,\n      loading,\n      prepareToSubmit,\n    } = this.props\n    return (\n      <AntdModal\n        className={cx('modal', className)}\n        visible={visible}\n        width={width}\n        title={title}\n        onOk={this.handleOk}\n        onCancel={this.handleCancel}\n        centered\n        destroyOnClose\n        footer={[\n          <Button key=\"cancel\" disabled={loading} onClick={this.handleCancel}>\n            {cancelBtnText}\n          </Button>,\n          <Button\n            key=\"ok\"\n            type=\"primary\"\n            loading={loading}\n            disabled={!prepareToSubmit}\n            onClick={this.handleOk}\n          >\n            {okBtnText}\n          </Button>,\n        ]}\n      >\n        {this.props.children}\n      </AntdModal>\n    )\n  }\n}\n\nexport default Modal\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames/bind'\nimport styles from './FileTree.module.scss'\n\nimport { Tree, Spin } from 'antd'\nimport { isEmpty } from 'lodash'\n\nconst cx = classNames.bind(styles)\nconst TreeNode = Tree.TreeNode\n\nclass FileTree extends Component {\n  static propTypes = {\n    className: PropTypes.string,\n    fileSelectable: PropTypes.bool,\n    folderSelectable: PropTypes.bool,\n    initTreeRoot: PropTypes.func.isRequired,\n    getNodeChild: PropTypes.func,\n    setSelectedFile: PropTypes.func,\n  }\n\n  static defaultProps = {\n    className: '',\n    fileSelectable: true,\n    folderSelectable: true,\n    getNodeChild: () => {},\n    setSelectedFile: () => {},\n  }\n\n  state = {\n    fileTreeData: [],\n  }\n\n  componentDidMount = () => {\n    const { initTreeRoot } = this.props\n    initTreeRoot().then(treeRoot =>\n      // aync request simulation\n      setTimeout(() => {\n        this.setState((prevState, props) => ({\n          fileTreeData: treeRoot,\n          loading: false,\n        }))\n      }, 500)\n    )\n  }\n\n  onClickNodeChild = treeNode => {\n    const { getNodeChild } = this.props\n    return !treeNode.props.children && !treeNode.props.isLeaf\n      ? getNodeChild(treeNode.props.path).then(childNodes => {\n          treeNode.props.dataRef.children = childNodes\n          this.setState((prevState, props) => ({\n            fileTreeData: [...this.state.fileTreeData],\n          }))\n        })\n      : null\n  }\n\n  onSelect = (selectedKeys, event) => {\n    const { setSelectedFile } = this.props\n    setSelectedFile(!isEmpty(selectedKeys) ? event.node.props.path : '')\n  }\n\n  renderTreeNodes = data => {\n    const { fileSelectable, folderSelectable } = this.props\n    return data.map(item => (\n      <TreeNode\n        title={item.name}\n        key={item.path}\n        path={item.path}\n        isLeaf={!item.isFolder}\n        selectable={item.isFolder ? folderSelectable : fileSelectable}\n        dataRef={item}\n      >\n        {item.children ? this.renderTreeNodes(item.children) : null}\n      </TreeNode>\n    ))\n  }\n\n  render() {\n    const { fileTreeData } = this.state\n    const { className } = this.props\n    return isEmpty(fileTreeData) ? (\n      <div className={cx('file-tree', className)}>\n        <Spin className={cx('spin')} tip=\"Loading...\" />\n      </div>\n    ) : (\n      <Tree\n        className={cx('file-tree', className)}\n        loadData={this.onClickNodeChild}\n        onSelect={this.onSelect}\n      >\n        {this.renderTreeNodes(fileTreeData)}\n      </Tree>\n    )\n  }\n}\n\nexport default FileTree\n","import axios from 'axios'\nimport { FAKE_API_ROOT as host } from './config'\n\nexport const request = ({\n  method = 'get',\n  endpoint,\n  query = {},\n  fullUrl = '',\n}) => {\n  const url = fullUrl || host + endpoint\n\n  return axios({\n    method,\n    url,\n    params: query,\n  })\n}\n\nexport const getNodeChild = nodePath =>\n  request({ endpoint: nodePath + '.json' })\n    .then(res => {\n      const path = res.data.path\n      return res.data.fileList.map(file => ({\n        ...file,\n        path: path + '/' + file.name,\n      }))\n    })\n    .catch(err => console.error(err))\n","import React, { Component } from 'react'\nimport classNames from 'classnames/bind'\nimport styles from './App.module.scss'\n\nimport { Button } from 'antd'\nimport Modal from '../components/Modal/Modal'\nimport FileTree from '../components/FileTree/FileTree'\nimport { getNodeChild } from '../api'\nimport { rootFolder } from '../config'\n\nconst cx = classNames.bind(styles)\n\nclass App extends Component {\n  state = {\n    modalVisible: false,\n    modalLoading: false,\n    selectedFile: '',\n    submitFile: '',\n  }\n\n  showModal = () => {\n    this.setState((prevState, props) => ({\n      modalVisible: true,\n    }))\n  }\n\n  onModalClose = () => {\n    this.setState((prevState, props) => ({\n      modalVisible: false,\n      selectedFile: '',\n    }))\n  }\n\n  onModalOk = () => {\n    this.setState((prevState, props) => ({\n      modalLoading: true,\n    }))\n\n    // aync request simulation\n    setTimeout(() => {\n      this.setState((prevState, props) => ({\n        modalVisible: false,\n        modalLoading: false,\n        selectedFile: '',\n        submitFile: prevState.selectedFile,\n      }))\n    }, 500)\n  }\n\n  setSelectedFile = path => {\n    this.setState((prevState, props) => ({\n      selectedFile: path,\n    }))\n  }\n\n  render() {\n    const { modalVisible, modalLoading, selectedFile, submitFile } = this.state\n    return (\n      <div className={cx('app')}>\n        <div className={cx('submit-file')}>\n          {submitFile ? 'Submit : ' + submitFile : null}\n        </div>\n        <Button\n          className={cx('upload-btn')}\n          type=\"primary\"\n          onClick={this.showModal}\n        >\n          Show Modal\n        </Button>\n\n        <Modal\n          visible={modalVisible}\n          title={'Please choose a file or a folder'}\n          okBtnText={'Submit'}\n          loading={modalLoading}\n          prepareToSubmit={Boolean(selectedFile.length)}\n          onModalClose={this.onModalClose}\n          onModalOk={this.onModalOk}\n        >\n          <FileTree\n            initTreeRoot={() => getNodeChild(rootFolder)}\n            getNodeChild={getNodeChild}\n            setSelectedFile={this.setSelectedFile}\n          />\n          <div className={cx('selected-file')}>\n            {selectedFile ? 'Selected : ' + selectedFile : null}\n          </div>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/base.scss'\nimport App from './pages/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","const HOST = global.window\n  ? `${window.location.protocol}//${window.location.hostname}`\n  : 'http://localhost'\nconst PATH = global.window ? window.location.pathname : ''\nconst PORT = global.window ? window.location.port : '3000'\nexport const API_ROOT = `${HOST}:${PORT}`\nexport const FAKE_API_ROOT = `${API_ROOT}${PATH}/fakedata`\n\nexport const rootFolder = '/root'\n"],"sourceRoot":""}