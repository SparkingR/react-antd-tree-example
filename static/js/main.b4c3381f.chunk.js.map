{"version":3,"sources":["pages/App.module.scss","components/FileTree/FileTree.module.scss","config.js","components/Modal/Modal.js","components/FileTree/FileTree.js","api.js","pages/App.js","serviceWorker.js","index.js"],"names":["module","exports","upload-btn","selected-file","file-tree","spin","global","__webpack_require__","d","__webpack_exports__","fakedataUrl","HOST","window","concat","location","protocol","hostname","PORT","port","cx","classNames","bind","styles","Modal","handleOk","_this","props","onModalOk","handleCancel","loading","onCloseModal","_this$props","this","className","visible","width","title","cancelBtnText","okBtnText","prepareToSubmit","react_default","a","createElement","modal","onOk","onCancel","centered","footer","es_button","key","disabled","onClick","type","children","Component","defaultProps","TreeNode","tree","FileTree","onSelect","selectedKeys","event","setSelectedFile","isEmpty_default","node","path","renderTreeNodes","data","map","item","name","id","isLeaf","isFolder","selectable","dataRef","fileTreeData","onLoadTreeNodeChild","tip","loadData","requestTreeNode","nodePath","_ref","_ref$method","method","endpoint","_ref$query","query","_ref$fullUrl","fullUrl","url","host","axios","params","request","then","res","fileList","file","Object","objectSpread","shortid","generate","catch","err","console","error","App","state","modalVisible","modalLoading","selectedFile","showModal","setState","prevState","setTimeout","initTreeData","Promise","resolve","treeRoot","treeNode","childNodes","toConsumableArray","_this$state","components_Modal_Modal","length","components_FileTree_FileTree","Boolean","match","ReactDOM","render","pages_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4c3381f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"upload-btn\":\"App_upload-btn__2zG_I\",\"selected-file\":\"App_selected-file__1SV6C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"file-tree\":\"FileTree_file-tree__3yELz\",\"spin\":\"FileTree_spin__uCCEv\"};","const HOST = global.window ? `${window.location.protocol}//${window.location.hostname}` : 'http://localhost';\nconst PORT = global.window ? window.location.port : '3000';\nexport const API_ROOT = `${HOST}:${PORT}`\nexport const fakedataUrl = HOST + ':' + PORT + '/fakedata'\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames/bind'\nimport styles from './Modal.module.scss'\nimport { Modal as AntdModal, Button } from 'antd'\n\nconst cx = classNames.bind(styles)\n\nclass Modal extends Component {\n  static propTypes = {\n    className: PropTypes.string,\n    visible: PropTypes.bool.isRequired,\n    width: PropTypes.string,\n    title: PropTypes.string,\n    cancelBtnText: PropTypes.string,\n    okBtnText: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    prepareToSubmit: PropTypes.bool,\n    onModalOk: PropTypes.func.isRequired,\n    onCloseModal: PropTypes.func.isRequired,\n  }\n\n  static defaultProps = {\n    className: '',\n    width: '50%',\n    title: '',\n    cancelBtnText: 'Cancel',\n    okBtnText: 'Ok',\n    prepareToSubmit: true,\n  }\n\n  handleOk = () => {\n    this.props.onModalOk()\n  }\n\n  handleCancel = () => {\n    !this.props.loading && this.props.onCloseModal()\n  }\n\n  render() {\n    const {\n      className,\n      visible,\n      width,\n      title,\n      cancelBtnText,\n      okBtnText,\n      loading,\n      prepareToSubmit,\n    } = this.props\n    return (\n      <AntdModal\n        className={cx('modal', className)}\n        visible={visible}\n        width={width}\n        title={title}\n        onOk={this.handleOk}\n        onCancel={this.handleCancel}\n        centered\n        footer={[\n          <Button key=\"cancel\" disabled={loading} onClick={this.handleCancel}>\n            {cancelBtnText}\n          </Button>,\n          <Button\n            key=\"ok\"\n            type=\"primary\"\n            loading={loading}\n            disabled={!prepareToSubmit}\n            onClick={this.handleOk}\n          >\n            {okBtnText}\n          </Button>,\n        ]}\n      >\n        {this.props.children}\n      </AntdModal>\n    )\n  }\n}\n\nexport default Modal\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames/bind'\nimport styles from './FileTree.module.scss'\nimport { Tree, Spin } from 'antd'\nimport { isEmpty } from 'lodash'\n\nconst cx = classNames.bind(styles)\nconst TreeNode = Tree.TreeNode\n\nclass FileTree extends Component {\n  static propTypes = {\n    className: PropTypes.string,\n    fileTreeData: PropTypes.array.isRequired,\n    onLoadTreeNodeChild: PropTypes.func,\n    setSelectedFile: PropTypes.func,\n  }\n\n  static defaultProps = {\n    className: '',\n    onLoadTreeNodeChild: () => {},\n    setSelectedFile: () => {},\n  }\n\n  onSelect = (selectedKeys, event) => {\n    this.props.setSelectedFile(\n      !isEmpty(selectedKeys) ? event.node.props.path : ''\n    )\n  }\n\n  renderTreeNodes = data =>\n    data.map(item => (\n      <TreeNode\n        title={item.name}\n        key={item.id}\n        path={item.path}\n        isLeaf={!item.isFolder}\n        selectable={!item.isFolder}\n        dataRef={item}\n      >\n        {item.children ? this.renderTreeNodes(item.children) : null}\n      </TreeNode>\n    ))\n\n  render() {\n    const { className, fileTreeData, onLoadTreeNodeChild } = this.props\n    return isEmpty(fileTreeData) ? (\n      <div className={cx('file-tree', className)}>\n        <Spin className={cx('spin')} tip=\"Loading...\" />\n      </div>\n    ) : (\n      <Tree\n        className={cx('file-tree', className)}\n        loadData={onLoadTreeNodeChild}\n        onSelect={this.onSelect}\n      >\n        {this.renderTreeNodes(fileTreeData)}\n      </Tree>\n    )\n  }\n}\n\nexport default FileTree\n","import axios from 'axios'\nimport shortid from 'shortid'\nimport { fakedataUrl as host } from './config'\n\nexport const request = ({\n  method = 'get',\n  endpoint,\n  query = {},\n  fullUrl = '',\n}) => {\n  const url = fullUrl || host + endpoint\n\n  return axios({\n    method,\n    url,\n    params: query,\n  })\n}\n\nexport const requestTreeNode = nodePath =>\n  request({ endpoint: nodePath + '.json' })\n    .then(res => {\n      const path = res.data.path\n      return res.data.fileList.map(file => ({\n        ...file,\n        path: path + '/' + file.name,\n        id: shortid.generate(),\n      }))\n    })\n    .catch(err => console.error(err))\n\nexport const submitModelConfig = () => console.log('dummy')\n","import React, { Component } from 'react'\nimport classNames from 'classnames/bind'\nimport styles from './App.module.scss'\nimport { Button } from 'antd'\nimport Modal from '../components/Modal/Modal'\nimport FileTree from '../components/FileTree/FileTree'\nimport { requestTreeNode, submitModelConfig } from '../api'\n\nconst cx = classNames.bind(styles)\n\nclass App extends Component {\n  state = {\n    modalVisible: false,\n    modalLoading: false,\n    selectedFile: '',\n    fileTreeData: [],\n  }\n\n  // For Modal\n  showModal = () => {\n    this.setState((prevState, props) => ({\n      modalVisible: true,\n      fileTreeData: [],\n    }))\n\n    // async\n    setTimeout(this.initTreeData, 2000)\n  }\n\n  onCloseModal = () => {\n    this.setState((prevState, props) => ({\n      modalVisible: false,\n      selectedFile: '',\n    }))\n  }\n\n  onModalOk = () => {\n    this.setState((prevState, props) => ({\n      modalLoading: true,\n    }))\n\n    // async\n    // submitModelConfig()\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this.setState((prevState, props) => ({\n          modalVisible: false,\n          modalLoading: false,\n          selectedFile: '',\n        }))\n        resolve()\n      }, 3000)\n    })\n  }\n\n  // For FileTree\n  initTreeData = () => {\n    requestTreeNode('/root').then(treeRoot =>\n      this.setState((prevState, props) => ({\n        fileTreeData: treeRoot,\n      }))\n    )\n  }\n\n  onLoadTreeNodeChild = treeNode =>\n    treeNode.props.children || treeNode.props.isLeaf\n      ? null\n      : requestTreeNode(treeNode.props.path).then(childNodes => {\n          treeNode.props.dataRef.children = childNodes\n          this.setState({\n            fileTreeData: [...this.state.fileTreeData],\n          })\n        })\n\n  setSelectedFile = path => {\n    this.setState((prevState, props) => ({\n      selectedFile: path,\n    }))\n  }\n\n  render() {\n    const {\n      modalVisible,\n      modalLoading,\n      selectedFile,\n      fileTreeData,\n    } = this.state\n    return (\n      <div className={cx('app')}>\n        <Button\n          className={cx('upload-btn')}\n          type=\"primary\"\n          onClick={this.showModal}\n        >\n          Choose a file\n        </Button>\n        <Modal\n          visible={modalVisible}\n          title={'Please choose a file'}\n          okBtnText={'Submit'}\n          loading={modalLoading}\n          prepareToSubmit={selectedFile.length > 0}\n          onCloseModal={this.onCloseModal}\n          onModalOk={this.onModalOk}\n        >\n          <FileTree\n            fileTreeData={fileTreeData}\n            setSelectedFile={this.setSelectedFile}\n            onLoadTreeNodeChild={this.onLoadTreeNodeChild}\n          />\n          <div className={cx('selected-file')}>\n            {selectedFile ? 'Selected file : ' + selectedFile : null}\n          </div>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/base.scss'\nimport App from './pages/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}